// Naming
/*
.challenge {
    width: 1000px;
    margin: 30px auto;
    
    display: grid;
    grid-template-rows: [header-start] 100px [header-end box-start] 200px [box-end main-start] 400px [main-end footer-start] 100px [footer-end];
    // Every row is named. The start is the start number of the row and the end is the end of the row. We can add the start of another row in the same box as the end of previous.
    grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 200px [grid-end]; 
    // The same as row names, we can name our columns. If the columns are generated with repeat function, we can just name the start and end, each name will be created an incrementing number.
    grid-gap: 30px;
    
    & > * {
      background-color: orangered;
      padding: 20px;
      color: white;
      font-size: 30px;
      font-family: sans-serif;
    }
    
    .header {
      grid-column: col-start 1 / grid-end;
    }
    
    .sidebar {
      grid-column: col-end 3 / grid-end;
      grid-row: box-start / main-end;
    }
    
    .main-content {
      grid-column: col-start 1 / col-end 3;
    }
    
    .footer {
      grid-column: col-start 1 / grid-end;
    }
  }
  */

  // METHOD 3: NAME GRID AREAS
  /*
.challenge {
    width: 1000px;
    margin: 30px auto;
    
    display: grid;
    grid-template-rows: 100px 200px 400px 100px;
    grid-template-columns: repeat(3, 1fr) 200px;
    grid-gap: 30px;
    
    grid-template-areas: ". head head ."
                         "box-1 box-2 box-3 side"
                         "main main main side"
                         "foot foot foot foot";

                         
    // the grid template area is used to name each cell. Then we can give grid-area in the class the name of that cell. For example look at the boxes.
                         
    grid-auto-rows: 80px;
    grid-auto-flow: row dense;
    grid-auto-columns: .5fr;

    // Explicit and implicit: When we specify the number of rows and columns, it explicit. But if we have more content than we specified, css will generate more grid. By default they are row, but we can control is using the above properties.

    justify-content: center; // end, start, stratch
    // This allows us to justify contents horizontally across rows. default is stratch
    align-content: center; // this allows us to justify content vertically across columns.


    & > * {
      background-color: orangered;
      padding: 20px;
      color: white;
      font-size: 30px;
      font-family: sans-serif;
    }
    
    .header {
      grid-area: head;
    }
    
    .small-box-1 { grid-area: box-1; }
    .small-box-2 { grid-area: box-2; }
    .small-box-3 { grid-area: box-3; }
  
    
    .sidebar {
      grid-area: side;
    }
    
    .main-content {
      grid-area: main;
    }
    
    .footer {
      grid-area: foot;
    }
  }
*/

.container {
    background-color: #eeee;
    width: 1000px;
    margin: 30px auto;

    display: grid;
    grid-template-rows: repeat(2, 150px);
    //grid-template-columns: repeat(2, 150px) 1fr;
    //grid-template-columns: 50% 1fr 2fr;
    grid-template-columns: repeat(3, 1fr);

    // grid-row-gap: 30px;
    // grid-column-gap: 30px;

    grid-gap: 30px;

    
}
.item {
    padding: 20px;
    font-size: 30px;
    font-family: sans-serif;
    color: white;
    &--1 {background-color: orangered}
    &--2 {background-color: yellowgreen}
    &--3 {background-color: blueviolet}
    &--4 {background-color: palevioletred}
    &--5 {background-color: royalblue}
    &--6 {background-color: orange}

    // Positioning: This moves the first item to second row and second column.
    &--1 {
        /*
        grid-row-start: 2; // Move it to row 2.
        grid-row-end: 3; // The row that has 3 itmes.
        grid-column-start: 2;
        grid-column-end: 3;
        */

        // Cleaner 
        /*
        grid-row: 2/3;
        grid-column: 2/3;
        */

    }

    &--6 {
        /*
        grid-row: 1/2;
        grid-column: 2/3;
        */
    }

    &--1 {
        // Spinning grid.
        grid-row: 1/3; // Will take from 1 to 3 rows.
       // grid-column: 1/3; // Will take 1 to 3 columns.
        //grid-column: 1/ -1; // From 1 to the end. -1 is all the way to the end.
    }
}

.layout {
    width: 1000px;
    margin: 30px auto;
    display: grid;
    grid-template-rows: 200px 200px 400px 200px;
    grid-template-columns: repeat(3, 1fr) 200px;
    grid-gap: 30px;

    & > * {
        background: orangered;
        color: #FFF;
        padding: 20px;
        font-size: 30px;
        font-family: sans-serif;
    }

    .header {
        grid-column: 1/-1;
    }

    .sidebar {
        grid-column: 4/5;
        grid-row: 2 / span 2;
    }

    .big-box {
        grid-column: 1/ span 3;
    }

    .footer {
        grid-column: 1/-1;
    }
}